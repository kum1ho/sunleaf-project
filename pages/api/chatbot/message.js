const { findBotResponse } = require('../../../lib/chatbot-database');

module.exports = async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }

  const { message, sessionId } = req.body || {};

  console.log('[ChatBot Message] Request:', { message, sessionId });

  if (!message || !sessionId) {
    return res.status(400).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç' });
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å
    const { response: botReply, category } = findBotResponse(message);
    
    console.log('[ChatBot Message] Category:', category, 'Reply length:', botReply.length);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    try {
      const { addRequest } = require('../../../lib/requests-storage');
      addRequest({
        type: 'chatbot-message',
        message,
        sessionId,
        reply: botReply,
        category,
        source: 'SunBot Database',
      });
    } catch (storageError) {
      console.log('[ChatBot Message] Storage not available');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∂–∏–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
    const needsHumanKeywords = '–º–µ–Ω–µ–¥–∂–µ—Ä|–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç|–ª—é–¥–∏–Ω–∞|–∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ|–ø–µ—Ä–µ–¥–∑–≤–æ–Ω—ñ—Ç—å|—Å–∫–ª–∞–¥–Ω–æ|–Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤|–Ω–µ –∑–Ω–∞—é|–∂–∏–≤–∏–π|–æ–ø–µ—Ä–∞—Ç–æ—Ä';
    const needsHuman = category === 'fallback' || 
                       new RegExp(needsHumanKeywords, 'i').test(message) || 
                       category === 'consultation';

    return res.status(200).json({ 
      reply: botReply,
      needsHuman,
      category,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('[ChatBot Message] Error:', error);
    return res.status(500).json({ 
      reply: '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: +380 67 123-45-67 üìû',
      needsHuman: true,
    });
  }
};
